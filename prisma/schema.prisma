// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Product {
  id String @id @default(uuid())
  name String
  description String?
  unitPrice String @default("0.00")
  imageUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  deletedAt DateTime?
  campaigns CampaignProduct[]
  creatorUserId String? // if null, means product is generated by AI
  creatorUser User? @relation(fields: [creatorUserId], references: [id])
  reviews Review[]
}

model User {
  id String @id @default(uuid())
  username String @unique
  passwordHashed String
  userType String // owner, reviewer, consumer
  createdAt DateTime @default(now())
  deletedAt DateTime?
  reviews Review[]
  createdProducts Product[]
  sessions Session[]
}

model Review {
  id String @id @default(uuid())
  reviewerUserId String
  reviewerUser User @relation(fields: [reviewerUserId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Campaign {
  id String @id @default(uuid())
  title String
  description String
  createdAt DateTime @default(now())
  endsAt DateTime?
  products CampaignProduct[]
}

model CampaignProduct {
  id Int @id @default(autoincrement())
  campaignId String
  campaign Campaign @relation(fields: [campaignId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])
}

model Session {
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  validUntil DateTime
}
